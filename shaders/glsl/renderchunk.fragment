// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.

#include "fragmentVersionCentroid.h"

#if __VERSION__ >= 300
	#ifndef BYPASS_PIXEL_SHADER
		#if defined(TEXEL_AA) && defined(TEXEL_AA_FEATURE)
			_centroid in highp vec2 uv0;
			_centroid in highp vec2 uv1;
		#else
			_centroid in vec2 uv0;
			_centroid in vec2 uv1;
		#endif
	#endif
#else
	#ifndef BYPASS_PIXEL_SHADER
		varying vec2 uv0;
		varying vec2 uv1;
	#endif
#endif

varying vec4 color;

#ifdef FOG
varying vec4 fogColor;
#endif

#include "uniformShaderConstants.h"
#include "util.h"

LAYOUT_BINDING(0) uniform sampler2D TEXTURE_0;
LAYOUT_BINDING(1) uniform sampler2D TEXTURE_1;
LAYOUT_BINDING(2) uniform sampler2D TEXTURE_2;

//#if defined(GL_FRAGMENT_PRECISION_HIGH)
    //#define pfact highp
//#else
    #define pfact highp
//#endif


varying pfact vec3 worldPosition;

void main()
{
#ifdef BYPASS_PIXEL_SHADER
	gl_FragColor = vec4(0, 0, 0, 0);
	return;
#else 

#if USE_TEXEL_AA
	vec4 diffuse = texture2D_AA(TEXTURE_0, uv0);
#else
	vec4 diffuse = texture2D(TEXTURE_0, uv0);
#endif
	
#ifdef SEASONS_FAR
	diffuse.a = 1.0;
#endif

#if USE_ALPHA_TEST
	#ifdef ALPHA_TO_COVERAGE
	#define ALPHA_THRESHOLD 0.05
	#else
	#define ALPHA_THRESHOLD 0.5
	#endif
	if(diffuse.a < ALPHA_THRESHOLD)
		discard;
#endif

pfact vec3 dfx = (dFdx(worldPosition));
pfact vec3 dfy = (dFdy(worldPosition));

pfact vec3 worldNormal = normalize(cross(dfx, dfy)); 
pfact vec3 absoluteWorldNormal = abs(worldNormal);

pfact float upFace = max(worldNormal.y, 0.00);

vec4 inColor = color;

vec3 whiteColor = color.rgb;

pfact vec3 baseLightDirection = vec3(0.625, 0.50, 0.8157);

pfact float ambientOcclusionDiffuseLighting = abs(dot(worldNormal, baseLightDirection)) + 0.50 * upFace;

vec3 outColor = inColor.rgb / ambientOcclusionDiffuseLighting;

if(outColor.r > 1.00 || outColor.g > 1.00 || outColor.b > 1.00){
    if(abs(outColor.r - outColor.g) <= 0.002 && abs(outColor.g - outColor.b) <= 0.002 && abs(outColor.b - outColor.r) <= 0.002){
               outColor = vec3(1.00, 1.00, 1.00);
    } else {
               outColor = inColor.rgb;
    }
}

#if defined(BLEND)
	diffuse.a *= inColor.a;
#endif

#if !defined(ALWAYS_LIT)
	diffuse *= texture2D( TEXTURE_1, uv1 );
#endif

#ifndef SEASONS
	#if !USE_ALPHA_TEST && !defined(BLEND)
		diffuse.a = inColor.a;
	#endif
	
	diffuse.rgb *= outColor;
#else
	vec2 uv = inColor.xy;
	diffuse.rgb *= mix(vec3(1.0,1.0,1.0), texture2D( TEXTURE_2, uv).rgb*2.0, inColor.b);
	diffuse.rgb *= inColor.aaa;
	diffuse.a = 1.0;
#endif

//diffuse.rgb = diffuse.rgb * mix(1.25, 1.00, dot(diffuse.rgb, vec3(0.2126, 0.7125, 0.0722))) ;

diffuse.rgb = absoluteWorldNormal;

#ifdef FOG
	diffuse.rgb = mix( diffuse.rgb, fogColor.rgb, fogColor.a );
#endif

	gl_FragColor = diffuse;
	
#endif // BYPASS_PIXEL_SHADER
}
